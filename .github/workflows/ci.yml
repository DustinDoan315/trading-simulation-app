name: CI

on:
  push:
    branches: ["main", "develop"]
  pull_request:
    branches: ["main", "develop"]

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: "yarn"

      - name: Install dependencies
        run: |
          yarn install --frozen-lockfile

      - name: TypeScript type checking (strict)
        run: |
          echo "üîç Running TypeScript type checking..."
          yarn tsc --noEmit --strict --noUnusedLocals --noUnusedParameters --noImplicitReturns
        continue-on-error: false

      - name: TypeScript type checking (with warnings)
        run: |
          echo "‚ö†Ô∏è Running TypeScript with warnings..."
          yarn tsc --noEmit --strict --noUnusedLocals --noUnusedParameters --noImplicitReturns --pretty
        continue-on-error: true

      - name: ESLint check
        run: |
          echo "üîç Running ESLint..."
          yarn expo lint --fix
        continue-on-error: false

      - name: Check for unused dependencies
        run: |
          echo "üîç Checking for unused dependencies..."
          npx depcheck --ignores="@types/*,jest,react-test-renderer" || true

      - name: Check for console.log statements
        run: |
          echo "üîç Checking for console.log statements..."
          if grep -r "console\.log" --include="*.ts" --include="*.tsx" . --exclude-dir=node_modules --exclude-dir=.expo --exclude-dir=.git; then
            echo "‚ö†Ô∏è Warning: console.log statements found in code. Consider removing them for production."
            echo "Found console.log statements in:"
            grep -r "console\.log" --include="*.ts" --include="*.tsx" . --exclude-dir=node_modules --exclude-dir=.expo --exclude-dir=.git -n
          else
            echo "‚úÖ No console.log statements found"
          fi

      - name: Check for TODO comments
        run: |
          echo "üîç Checking for TODO comments..."
          if grep -r "TODO" --include="*.ts" --include="*.tsx" . --exclude-dir=node_modules --exclude-dir=.expo --exclude-dir=.git; then
            echo "‚ö†Ô∏è Warning: TODO comments found in code:"
            grep -r "TODO" --include="*.ts" --include="*.tsx" . --exclude-dir=node_modules --exclude-dir=.expo --exclude-dir=.git -n
          else
            echo "‚úÖ No TODO comments found"
          fi

      - name: Check for FIXME comments
        run: |
          echo "üîç Checking for FIXME comments..."
          if grep -r "FIXME" --include="*.ts" --include="*.tsx" . --exclude-dir=node_modules --exclude-dir=.expo --exclude-dir=.git; then
            echo "‚ö†Ô∏è Warning: FIXME comments found in code:"
            grep -r "FIXME" --include="*.ts" --include="*.tsx" . --exclude-dir=node_modules --exclude-dir=.expo --exclude-dir=.git -n
          else
            echo "‚úÖ No FIXME comments found"
          fi

      - name: Check file sizes
        run: |
          echo "üîç Checking for large files..."
          find . -name "*.ts" -o -name "*.tsx" | xargs wc -l | sort -nr | head -10

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: "yarn"

      - name: Install dependencies
        run: |
          yarn install --frozen-lockfile

      - name: Run tests with coverage
        run: |
          echo "üß™ Running tests..."
          yarn test --ci --runInBand --coverage --verbose

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  build:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: [code-quality, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: "yarn"

      - name: Install dependencies
        run: |
          yarn install --frozen-lockfile

      - name: Verify web build
        run: |
          echo "üèóÔ∏è Building web version..."
          yarn expo export:web

      - name: Check build artifacts
        run: |
          echo "üì¶ Checking build artifacts..."
          ls -la web-build/
          echo "‚úÖ Build verification completed"

  security:
    name: Security Checks
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: "yarn"

      - name: Install dependencies
        run: |
          yarn install --frozen-lockfile

      - name: Run security audit
        run: |
          echo "üîí Running security audit..."
          yarn audit --audit-level moderate || true

      - name: Check for hardcoded secrets
        run: |
          echo "üîí Checking for potential hardcoded secrets..."
          if grep -r -i "password\|secret\|key\|token" --include="*.ts" --include="*.tsx" . --exclude-dir=node_modules --exclude-dir=.expo --exclude-dir=.git | grep -v "//\|/\*\|import\|export\|const\|let\|var"; then
            echo "‚ö†Ô∏è Warning: Potential hardcoded secrets found. Please review:"
            grep -r -i "password\|secret\|key\|token" --include="*.ts" --include="*.tsx" . --exclude-dir=node_modules --exclude-dir=.expo --exclude-dir=.git | grep -v "//\|/\*\|import\|export\|const\|let\|var" || true
          else
            echo "‚úÖ No obvious hardcoded secrets found"
          fi
