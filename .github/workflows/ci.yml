name: CI

on:
  push:
    branches: ["main", "develop"]
  pull_request:
    branches: ["main", "develop"]

env:
  NODE_VERSION: "18"
  YARN_CACHE_FOLDER: ~/.cache/yarn

jobs:
  setup:
    name: Setup & Cache
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.value }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate cache key
        id: cache-key
        run: |
          echo "value=${{ github.sha }}-${{ hashFiles('yarn.lock') }}" >> $GITHUB_OUTPUT

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "yarn"

      - name: Install dependencies
        run: |
          yarn install --frozen-lockfile --prefer-offline

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.cache/yarn
          key: ${{ steps.cache-key.outputs.value }}
          restore-keys: |
            ${{ hashFiles('yarn.lock') }}-
            ${{ github.sha }}-

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      matrix:
        check: [typescript, comments, filesize]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "yarn"

      - name: Restore dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.cache/yarn
          key: ${{ needs.setup.outputs.cache-key }}
          restore-keys: |
            ${{ hashFiles('yarn.lock') }}-
            ${{ github.sha }}-

      - name: TypeScript check
        if: matrix.check == 'typescript'
        run: |
          echo "üîç Checking for TypeScript errors..."
          yarn tsc --noEmit --pretty
        continue-on-error: true

      - name: Check for TODO/FIXME comments
        if: matrix.check == 'comments'
        run: |
          echo "üîç Checking for TODO/FIXME comments..."
          COMMENTS=$(grep -r "TODO\|FIXME" --include="*.ts" --include="*.tsx" . --exclude-dir=node_modules --exclude-dir=.expo --exclude-dir=.git -n || true)
          if [ -n "$COMMENTS" ]; then
            echo "‚ö†Ô∏è Warning: TODO/FIXME comments found in code:"
            echo "$COMMENTS"
          else
            echo "‚úÖ No TODO/FIXME comments found"
          fi

      - name: Check file sizes
        if: matrix.check == 'filesize'
        run: |
          echo "üîç Checking for large files..."
          find . -name "*.ts" -o -name "*.tsx" | xargs wc -l | sort -nr | head -10

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "yarn"

      - name: Restore dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.cache/yarn
          key: ${{ needs.setup.outputs.cache-key }}
          restore-keys: |
            ${{ hashFiles('yarn.lock') }}-
            ${{ github.sha }}-

      - name: Run tests with coverage
        run: |
          echo "ÔøΩÔøΩ Running tests..."
          yarn test --ci --runInBand --coverage --verbose --maxWorkers=2

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
        continue-on-error: true

  build:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: [setup, code-quality]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "yarn"

      - name: Restore dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.cache/yarn
          key: ${{ needs.setup.outputs.cache-key }}
          restore-keys: |
            ${{ hashFiles('yarn.lock') }}-
            ${{ github.sha }}-

      - name: Verify web build
        run: |
          echo "üèóÔ∏è Building web version..."
          yarn expo export:web

      - name: Check build artifacts
        run: |
          echo "üì¶ Checking build artifacts..."
          ls -la web-build/
          echo "‚úÖ Build verification completed"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: web-build
          path: web-build/
          retention-days: 7

  security:
    name: Security Checks
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "yarn"

      - name: Restore dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.cache/yarn
          key: ${{ needs.setup.outputs.cache-key }}
          restore-keys: |
            ${{ hashFiles('yarn.lock') }}-
            ${{ github.sha }}-

      - name: Run security audit
        run: |
          echo "üîí Running security audit..."
          yarn audit --audit-level moderate || true

      - name: Check for hardcoded secrets
        run: |
          echo "üîí Checking for potential hardcoded secrets..."
          SECRETS=$(grep -r -i "password\|secret\|key\|token" --include="*.ts" --include="*.tsx" . --exclude-dir=node_modules --exclude-dir=.expo --exclude-dir=.git | grep -v "//\|/\*\|import\|export\|const\|let\|var" || true)
          if [ -n "$SECRETS" ]; then
            echo "‚ö†Ô∏è Warning: Potential hardcoded secrets found. Please review:"
            echo "$SECRETS"
          else
            echo "‚úÖ No obvious hardcoded secrets found"
          fi

  performance:
    name: Performance Checks
    runs-on: ubuntu-latest
    needs: setup
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "yarn"

      - name: Restore dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.cache/yarn
          key: ${{ needs.setup.outputs.cache-key }}
          restore-keys: |
            ${{ hashFiles('yarn.lock') }}-
            ${{ github.sha }}-

      - name: Check bundle size
        run: |
          echo "üìä Checking bundle size..."
          yarn expo export:web --no-minify
          du -sh web-build/ || echo "Bundle size check completed"

      - name: Check for unused dependencies
        run: |
          echo "üîç Checking for unused dependencies..."
          npx depcheck --json || echo "Dependency check completed"

  final:
    name: Final Status
    runs-on: ubuntu-latest
    needs: [code-quality, test, build, security]
    if: always()
    steps:
      - name: Check job status
        run: |
          echo "üìã CI Pipeline Summary:"
          echo "Code Quality: ${{ needs.code-quality.result }}"
          echo "Tests: ${{ needs.test.result }}"
          echo "Build: ${{ needs.build.result }}"
          echo "Security: ${{ needs.security.result }}"

          if [[ "${{ needs.code-quality.result }}" == "failure" ]] || \
             [[ "${{ needs.test.result }}" == "failure" ]] || \
             [[ "${{ needs.build.result }}" == "failure" ]] || \
             [[ "${{ needs.security.result }}" == "failure" ]]; then
            echo "‚ùå Some jobs failed"
            exit 1
          else
            echo "‚úÖ All jobs completed successfully"
          fi
