---
description: Trading Simulation App - Production Readiness Rules
globs:
  - "**/*.ts"
  - "**/*.tsx"
alwaysApply: false
---

# üöÄ PRODUCTION READINESS RULES

- All `console.log`, `console.warn`, and `console.error` calls must be removed.
- Use centralized constants (e.g. `TRADING_CONFIG`) for default values like `100000`.
- Avoid hardcoded color strings; use `theme.colors.*` instead.
- Input validation is required on all user entry points (text input, trade actions, etc.).
- Ensure that all portfolio operations are transactional and avoid race conditions.
- All critical async operations should have loading indicators and error fallback UIs.
- Add confirmation modals for destructive actions (e.g., portfolio reset, trade sell).
- Trading components must memoize expensive calculations using `useMemo` and `useCallback`.
- Components triggering network or state changes must wrap critical flows in `try/catch`.
- Ensure cleanup in components using `useEffect` to prevent memory leaks (especially with `WebView`, `Chart`, or `Socket`).

---

# üß± ARCHITECTURE & STATE

- Balance logic, calculations, and sync functions should be moved to a shared service (e.g. `BalanceCalculator`).
- No duplication of portfolio sync logic ‚Äî use a single source of truth (`UserSyncService`).
- Always use `useSelector` with memoized selectors when accessing Redux state.
- Redux actions that affect multiple entities (balance, portfolio) should dispatch atomic updates.

---

# üîê SECURITY & AUTH

- Do not perform any Supabase update without validating `uuid`/session token first.
- RLS (Row Level Security) must be enforced via Supabase policies.
- Use `Expo SecureStore` for all token or sensitive value storage.
- No sensitive values (API keys, tokens) should be hardcoded in source files.

---

# üì¶ CONFIG & METADATA

- `app.json` must have:
  - `"privacy": "public"`
  - valid `description`, `keywords`, and proper permission usage descriptions.
- Ensure `Info.plist` and `AndroidManifest.xml` declare necessary permissions with justifications.
- Remove unused dependencies: `react-dom`, `dotenv`, `@expo/config-plugins`, `reflect-metadata`, etc.
- Add missing dependencies like `redux`, `lint-staged`.

---

# üß™ TESTING & STABILITY

- Trading logic must have unit tests in `__tests__/` or `tests/` directory.
- All critical screens (trade execution, portfolio view) must have error boundaries.
- Use Sentry/Bugsnag or equivalent for runtime crash reporting in production.
- Offline functionality must be simulated and tested with `NetInfo` state toggles.

---

# üì≤ UI/UX STANDARDS

- Use `theme.colors.*` ‚Äî never hardcode color strings like `"#ffffff"`.
- Use `SafeAreaView` and responsive padding/margin logic.
- Show `ActivityIndicator` or skeletons during all async fetches.
- Error messages should be user-friendly (not technical stack traces).

---

# üìã DEPLOYMENT BLOCKERS (Critical Checkpoints)

- [ ] ‚úÖ All `console.log` statements are removed
- [ ] ‚úÖ Privacy policy URL set in `app.json`
- [ ] ‚úÖ Description & Keywords in metadata
- [ ] ‚úÖ Camera/notification permission descriptions added
- [ ] ‚úÖ Production API domains use HTTPS and certificate pinning
- [ ] ‚úÖ No inline API keys or secrets
- [ ] ‚úÖ RLS enforced + input validation complete
- [ ] ‚úÖ Error boundaries added to all flows
- [ ] ‚úÖ App assets (screenshots, icons, descriptions) are ready

---

# üìÖ FINAL NOTE

These rules ensure production compliance, store readiness, and long-term maintainability. All rules **must be followed before deployment to App Store or Google Play**.
